/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mongolianstring2tree;

import mongolianstring2tree.bean.Activationcode;
import mongolianstring2tree.bean.Remember;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.sun.org.apache.xpath.internal.axes.HasPositionalPredChecker;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;

import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import mongolianstring2tree.bean.RememberLastUseTime;
import mongolianstring2tree.utils.CpuUtil;
import mongolianstring2tree.utils.EncryptionAndDecryptionUtil;
import mongolianstring2tree.utils.IDTool;
import mongolianstring2tree.utils.ListCanWriteFolder;
import mongolianstring2tree.utils.MacAddressUtil;
import mongolianstring2tree.utils.SysClipboardUtil;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author yangy
 */
public class TreeJFrame extends JFrame {

    private BufferedReader bufferedReader;
    private BufferedReader mongolianBufferedReader;
//    private List<List<Node>> saveNodes = new ArrayList<>();
    private List<String> saveStrings = new ArrayList<>();
    private List<String> saveMongolianStrings = new ArrayList<>();
    private int saveNodesIndex;
    private List<Node> nodes = new ArrayList<>();
    private List<MongolianNode> mongolianNodes = new ArrayList<>();
    private JScrollPane scrollPane;
    private JScrollPane mongolianScrollPane;
    private JPanel_ShowTreeItem panel;
    private JPanel_ShowMongolianTreeItem mongolianPanel;
    private String text;
    private boolean initChinaFile = false;
    private boolean initMongolianFile = false;
    public static String activationCode;
    public static boolean isinputCheckcode = false;

    /**
     * Creates new form TreeJFrame
     */
    public TreeJFrame() {
        initComponents();
        check();
        setTitle("蒙汉双语树库管理程序");
        saveNodesIndex = 0;

        if (initFromFile()) {
            initShowTree();
        }
        middleShow();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton_PreString = new javax.swing.JButton();
        jButton_NextString = new javax.swing.JButton();
        jPanel_Tree = new javax.swing.JPanel();
        jPanel_MongolianTree = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaSearchString = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1ShowMongoliaString = new javax.swing.JTextArea();
        textField_SearchString = new java.awt.TextField();
        jButton_Search = new javax.swing.JButton();
        jButton_findChinesefile = new javax.swing.JButton();
        jButton_findMongolianfile = new javax.swing.JButton();
        textField_Toindex = new java.awt.TextField();
        jButton_ToIndex = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel_StringIndex = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton_PreString.setText("上一句");
        jButton_PreString.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_PreStringMouseClicked(evt);
            }
        });

        jButton_NextString.setText("下一句");
        jButton_NextString.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_NextStringMouseClicked(evt);
            }
        });

        jPanel_Tree.setPreferredSize(new java.awt.Dimension(0, 380));

        javax.swing.GroupLayout jPanel_TreeLayout = new javax.swing.GroupLayout(jPanel_Tree);
        jPanel_Tree.setLayout(jPanel_TreeLayout);
        jPanel_TreeLayout.setHorizontalGroup(
            jPanel_TreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel_TreeLayout.setVerticalGroup(
            jPanel_TreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );

        jPanel_MongolianTree.setPreferredSize(new java.awt.Dimension(0, 380));

        javax.swing.GroupLayout jPanel_MongolianTreeLayout = new javax.swing.GroupLayout(jPanel_MongolianTree);
        jPanel_MongolianTree.setLayout(jPanel_MongolianTreeLayout);
        jPanel_MongolianTreeLayout.setHorizontalGroup(
            jPanel_MongolianTreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel_MongolianTreeLayout.setVerticalGroup(
            jPanel_MongolianTreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );

        jTextAreaSearchString.setColumns(20);
        jTextAreaSearchString.setRows(5);
        jScrollPane1.setViewportView(jTextAreaSearchString);

        jTextArea1ShowMongoliaString.setColumns(20);
        jTextArea1ShowMongoliaString.setRows(5);
        jScrollPane2.setViewportView(jTextArea1ShowMongoliaString);

        jButton_Search.setText("搜索");
        jButton_Search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_SearchMouseClicked(evt);
            }
        });

        jButton_findChinesefile.setText("添加中文文件");
        jButton_findChinesefile.setToolTipText("");
        jButton_findChinesefile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_findChinesefileMouseClicked(evt);
            }
        });

        jButton_findMongolianfile.setText("添加蒙文文件");
        jButton_findMongolianfile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_findMongolianfileMouseClicked(evt);
            }
        });

        jButton_ToIndex.setText("跳转");
        jButton_ToIndex.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_ToIndexMouseClicked(evt);
            }
        });

        jLabel1.setText("内蒙古大学计算机学院开发");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jButton_PreString)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton_NextString)
                .addGap(18, 18, 18)
                .addComponent(jButton_findChinesefile)
                .addGap(18, 18, 18)
                .addComponent(jButton_findMongolianfile, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(114, 114, 114)
                .addComponent(textField_Toindex, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jButton_ToIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(93, 93, 93)
                .addComponent(jLabel_StringIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(textField_SearchString, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                .addGap(38, 38, 38)
                .addComponent(jButton_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel_MongolianTree, javax.swing.GroupLayout.DEFAULT_SIZE, 1600, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addComponent(jPanel_Tree, javax.swing.GroupLayout.DEFAULT_SIZE, 1600, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton_PreString, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton_NextString, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton_findChinesefile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_findMongolianfile))
                    .addComponent(textField_Toindex, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_ToIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_StringIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textField_SearchString, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_Tree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_MongolianTree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_NextStringMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_NextStringMouseClicked

        // TODO add your handling code here:
        if (saveNodesIndex < saveStrings.size() - 1) {
            saveNodesIndex++;

            // List<Node> nodesTemp = Util.BuildTree(saveStrings.get(saveNodesIndex));
            Gson gson = new Gson();
            List<Node> nodesTemp = gson.fromJson(saveStrings.get(saveNodesIndex), new TypeToken<List<Node>>() {
            }.getType());
            // nodes = Util.BuildTree(str);
            String strMongolia = saveMongolianStrings.get(saveNodesIndex);
            //mongolianNodes = MongolianUtil.BuildTree(strMongolia);
            mongolianNodes = gson.fromJson(strMongolia, new TypeToken<List<MongolianNode>>() {
            }.getType());
            panel.removeAll();
            scrollPane.remove(panel);
            scrollPane.removeAll();
            jPanel_Tree.remove(scrollPane);
            panel = new JPanel_ShowTreeItem(nodesTemp);
            panel.setPreferredSize(new Dimension(2000, 1000));
            scrollPane = new JScrollPane(panel);
            jPanel_Tree.add(scrollPane);
            scrollPane.setBounds(0, 0, 1600, 380);
            mongolianPanel.removeAll();
            mongolianScrollPane.removeAll();
            jPanel_MongolianTree.remove(mongolianScrollPane);
            try {
                //  mongolianNodes = MongolianUtil.BuildTree(saveMongolianStrings.get(saveNodesIndex));
                mongolianNodes = gson.fromJson(strMongolia, new TypeToken<List<MongolianNode>>() {
                }.getType());
                mongolianPanel = new JPanel_ShowMongolianTreeItem(mongolianNodes);
                mongolianPanel.setPreferredSize(new Dimension(3000, 800));
                mongolianScrollPane = new JScrollPane(mongolianPanel);
                mongolianScrollPane.setBounds(0, 0, 1600, 380);
                jPanel_MongolianTree.add(mongolianScrollPane);
                jTextAreaSearchString.setText(saveStrings.get(saveNodesIndex));
                jTextArea1ShowMongoliaString.setText(saveMongolianStrings.get(saveNodesIndex));
//                jPanel1.removeAll();
//                JLabel jLabel_StringIndex = new JLabel("第" + (saveNodesIndex + 1) + "句");
//                jPanel1.add(jLabel_StringIndex);
//                jPanel1.show();
                jLabel_StringIndex.setText("第" + (saveNodesIndex + 1) + "句");
                jPanel_MongolianTree.repaint();
                jPanel_Tree.repaint();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "语句解析错误");
            }

        } else {
            JOptionPane.showMessageDialog(this, "已经是最后一句了！");
        }
    }//GEN-LAST:event_jButton_NextStringMouseClicked

    private void jButton_PreStringMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_PreStringMouseClicked
        // TODO add your handling code here:
        if (saveNodesIndex >= 1) {
            saveNodesIndex--;
            jLabel_StringIndex.setText("第" + (saveNodesIndex + 1) + "句");
//            jPanel1.removeAll();
//            JLabel jLabel_StringIndex = new JLabel("第" + (saveNodesIndex + 1) + "句");
//            jPanel1.add(jLabel_StringIndex);
            //  List<Node> nodesTemp = Util.BuildTree(saveStrings.get(saveNodesIndex));
            Gson gson = new Gson();
            List<Node> nodesTemp = gson.fromJson(saveStrings.get(saveNodesIndex), new TypeToken<List<Node>>() {
            }.getType());
            panel.removeAll();
            scrollPane.remove(panel);
            scrollPane.removeAll();
            jPanel_Tree.remove(scrollPane);
            panel = new JPanel_ShowTreeItem(nodesTemp);
            // panel.setBounds(0, 0, 900, 1800);
            panel.setPreferredSize(new Dimension(2000, 1000));
            scrollPane = new JScrollPane(panel);
            jPanel_Tree.add(scrollPane);
            scrollPane.setBounds(0, 0, 1600, 380);
            mongolianPanel.removeAll();
            mongolianScrollPane.removeAll();
            jPanel_MongolianTree.remove(mongolianScrollPane);
            //  mongolianNodes = MongolianUtil.BuildTree(saveMongolianStrings.get(saveNodesIndex));
            mongolianNodes = gson.fromJson(saveMongolianStrings.get(saveNodesIndex), new TypeToken<List<MongolianNode>>() {
            }.getType());
            mongolianPanel = new JPanel_ShowMongolianTreeItem(mongolianNodes);
            mongolianPanel.setPreferredSize(new Dimension(3000, 800));
            mongolianScrollPane = new JScrollPane(mongolianPanel);
            mongolianScrollPane.setBounds(0, 0, 1600, 380);
            jPanel_MongolianTree.add(mongolianScrollPane);
            jTextAreaSearchString.setText(saveStrings.get(saveNodesIndex));
            jTextArea1ShowMongoliaString.setText(saveMongolianStrings.get(saveNodesIndex));
            jPanel_MongolianTree.repaint();
            jPanel_Tree.repaint();
        } else {
            JOptionPane.showMessageDialog(this, "已经是第一句了");
        }
    }//GEN-LAST:event_jButton_PreStringMouseClicked
//查找语句
    private void jButton_SearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_SearchMouseClicked
        // TODO add your handling code here:
        // JOptionPane.showMessageDialog(this,textField_SearchString.getText());
        String searchString = textField_SearchString.getText();
        //   List<Node> nodes_Search = saveNodes.get(saveNodesIndex);
        for (int i = 0; i < saveMongolianStrings.size(); i++) {
            if (saveMongolianStrings.get(i).contains(searchString)) {
                // JOptionPane.showMessageDialog(this, saveStrings.get(i));
                //  List<Node> nodesTemp = Util.BuildTree(saveStrings.get(i));
                 jLabel_StringIndex.setText("第" + (i+1)+"句");
                Gson gson = new Gson();
                List<Node> nodesTemp = gson.fromJson(saveStrings.get(i), new TypeToken<List<Node>>() {
                }.getType());

                panel.removeAll();
                scrollPane.remove(panel);
                scrollPane.removeAll();
                jPanel_Tree.remove(scrollPane);
                panel = new JPanel_ShowTreeItem(nodesTemp);
                // panel.setBounds(0, 0, 900, 1800);
                panel.setPreferredSize(new Dimension(2000, 1000));
                scrollPane = new JScrollPane(panel);
                jPanel_Tree.add(scrollPane);
                scrollPane.setBounds(0, 0, 1600, 380);
                mongolianPanel.removeAll();
                mongolianScrollPane.removeAll();
                jPanel_MongolianTree.remove(mongolianScrollPane);
                // mongolianNodes = MongolianUtil.BuildTree(saveMongolianStrings.get(i));
                mongolianNodes = gson.fromJson(saveMongolianStrings.get(i), new TypeToken<List<MongolianNode>>() {
                }.getType());

                mongolianPanel = new JPanel_ShowMongolianTreeItem(mongolianNodes);
                mongolianPanel.setPreferredSize(new Dimension(3000, 800));
                mongolianScrollPane = new JScrollPane(mongolianPanel);
                mongolianScrollPane.setBounds(0, 0, 1600, 380);
                jPanel_MongolianTree.add(mongolianScrollPane);
                jPanel_MongolianTree.repaint();
                jPanel_Tree.repaint();

                //显示查找出来的文字
                jTextAreaSearchString.setText(saveStrings.get(i));
                jTextArea1ShowMongoliaString.setText(saveMongolianStrings.get(i));

                break;
            }

        }
        //  JOptionPane.showMessageDialog(this,saveStrings.get(saveNodesIndex));
    }//GEN-LAST:event_jButton_SearchMouseClicked

    private void jButton_findMongolianfileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_findMongolianfileMouseClicked
        // TODO add your handling code here:
        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.showOpenDialog(this);
        if (jFileChooser.getSelectedFile() != null) {
            String filePath = jFileChooser.getSelectedFile().getName();
            if (filePath.endsWith(".txt")) {
                try {
                    File destFile = new File("mongolian.txt");
                    if (destFile.exists()) {
                        destFile.deleteOnExit();
                    } else {
                        destFile.createNewFile();
                    }
                    FileUtils.copyFile(jFileChooser.getSelectedFile(), destFile);
                    if (initMongolianFile()) {
                        if (initChinaFile && initMongolianFile) {
                            initShowTree();
                        }
                        JOptionPane.showMessageDialog(this, "文件添加成功");
                    } else {
                        JOptionPane.showMessageDialog(this, "文件添加失败");
                    }
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "文件添加失败");
                }
            } else {
                JOptionPane.showMessageDialog(this, "请选择txt的文件");
            }
        }

    }//GEN-LAST:event_jButton_findMongolianfileMouseClicked

    private void jButton_findChinesefileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_findChinesefileMouseClicked
        // TODO add your handling code here:
        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.showOpenDialog(this);
        if (jFileChooser.getSelectedFile() != null) {
            String filePath = jFileChooser.getSelectedFile().getName();
            if (filePath.endsWith(".txt")) {
                try {
                    File destFile = new File("chinese.txt");
                    if (destFile.exists()) {
                        destFile.deleteOnExit();
                    } else {
                        destFile.createNewFile();
                    }
                    FileUtils.copyFile(jFileChooser.getSelectedFile(), destFile);
                    if (initChinaFile()) {
                        if (initChinaFile && initMongolianFile) {
                            initShowTree();
                        }
                        JOptionPane.showMessageDialog(this, "文件添加成功");
                    } else {
                        JOptionPane.showMessageDialog(this, "文件添加失败");
                    }
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "文件添加失败");
                }
            } else {
                JOptionPane.showMessageDialog(this, "请选择txt的文件");
            }
        }

    }//GEN-LAST:event_jButton_findChinesefileMouseClicked

    private void jButton_ToIndexMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_ToIndexMouseClicked
        // TODO add your handling code here:
        if (!textField_Toindex.getText().equals("")) {
            String string = textField_Toindex.getText();
            try {
                int temp = Integer.parseInt(string);
                if (saveStrings.size() > temp || temp > 0) {
                    saveNodesIndex = temp - 1;
                    jLabel_StringIndex.setText("第" + (saveNodesIndex+1)+"句");
                    //    List<Node> nodesTemp = Util.BuildTree(saveStrings.get(i));
                    Gson gson = new Gson();
                    List<Node> nodesTemp = gson.fromJson(saveStrings.get(saveNodesIndex), new TypeToken<List<Node>>() {
                    }.getType());

                    panel.removeAll();
                    scrollPane.remove(panel);
                    scrollPane.removeAll();
                    jPanel_Tree.remove(scrollPane);
                    panel = new JPanel_ShowTreeItem(nodesTemp);
                    // panel.setBounds(0, 0, 900, 1800);
                    panel.setPreferredSize(new Dimension(2000, 1000));
                    scrollPane = new JScrollPane(panel);
                    jPanel_Tree.add(scrollPane);
                    scrollPane.setBounds(0, 0, 1600, 380);
                    mongolianPanel.removeAll();
                    mongolianScrollPane.removeAll();
                    jPanel_MongolianTree.remove(mongolianScrollPane);
                    // mongolianNodes = MongolianUtil.BuildTree(saveMongolianStrings.get(i));
                    mongolianNodes = gson.fromJson(saveMongolianStrings.get(saveNodesIndex), new TypeToken<List<MongolianNode>>() {
                    }.getType());

                    mongolianPanel = new JPanel_ShowMongolianTreeItem(mongolianNodes);
                    mongolianPanel.setPreferredSize(new Dimension(3000, 800));
                    mongolianScrollPane = new JScrollPane(mongolianPanel);
                    mongolianScrollPane.setBounds(0, 0, 1600, 380);
                    jPanel_MongolianTree.add(mongolianScrollPane);
                    jPanel_MongolianTree.repaint();
                    jPanel_Tree.repaint();

                    //显示查找出来的文字
                    jTextAreaSearchString.setText(saveStrings.get(saveNodesIndex));
                    jTextArea1ShowMongoliaString.setText(saveMongolianStrings.get(saveNodesIndex));
                } else {
                    JOptionPane.showMessageDialog(this, "超出跳转范围");
                }
            } catch (NumberFormatException numberFormatException) {
                JOptionPane.showMessageDialog(this, "请输入数字");
            }
        } else {
            JOptionPane.showMessageDialog(this, "请输入要跳转到第几句");
        }

    }//GEN-LAST:event_jButton_ToIndexMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TreeJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TreeJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TreeJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TreeJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TreeJFrame().setVisible(true);
            }
        });
    }

    private void middleShow() {
        Dimension displaySize = Toolkit.getDefaultToolkit().getScreenSize(); // 获得显示器大小对象 
        Dimension frameSize = this.getSize();             // 获得窗口大小对象  
        if (frameSize.width > displaySize.width) {
            frameSize.width = displaySize.width;           // 窗口的宽度不能大于显示器的宽度  
        }
        this.setLocation((displaySize.width - frameSize.width) / 2,
                (displaySize.height - frameSize.height) / 2); // 设置窗口居中显示器显示  
        // 设置窗口为可见的，默认为不可见  
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_NextString;
    private javax.swing.JButton jButton_PreString;
    private javax.swing.JButton jButton_Search;
    private javax.swing.JButton jButton_ToIndex;
    private javax.swing.JButton jButton_findChinesefile;
    private javax.swing.JButton jButton_findMongolianfile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_StringIndex;
    private javax.swing.JPanel jPanel_MongolianTree;
    private javax.swing.JPanel jPanel_Tree;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1ShowMongoliaString;
    private javax.swing.JTextArea jTextAreaSearchString;
    private java.awt.TextField textField_SearchString;
    private java.awt.TextField textField_Toindex;
    // End of variables declaration//GEN-END:variables

    private boolean initFromFile() {
        if (initChinaFile() && initMongolianFile()) {
            return true;
        } else {
            JOptionPane.showMessageDialog(this, "请先导入要解析的文件");
            return false;
        }
    }

    private boolean initChinaFile() {
        saveStrings.clear();
        try {
            bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream("chinese.txt"), "UTF-8"));
            try {
                while (true) {
                    text = bufferedReader.readLine();
                    if (text == null || ("######").equals(text)) {
                        bufferedReader.close();
                        break;
                    }
                    saveStrings.add(text);
                }
            } catch (IOException ex) {
                return false;
            }
        } catch (Exception ex) {
            return false;
        }
        initChinaFile = true;
        return true;
    }

    private boolean initMongolianFile() {
        saveMongolianStrings.clear();
        try {
            mongolianBufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream("mongolian.txt"), "UTF-8"));
            try {
                while (true) {
                    text = mongolianBufferedReader.readLine();
                    if (text == null || ("######").equals(text)) {
                        // System.out.println(text);
                        mongolianBufferedReader.close();
                        break;
                    }
                    saveMongolianStrings.add(text);
                }
            } catch (IOException ex) {
                return false;
            }
        } catch (Exception ex) {
            return false;
        }
        initMongolianFile = true;
        return true;
    }

    private void initShowTree() {
        if (scrollPane != null) {
            jPanel_Tree.removeAll();
        }
        if (mongolianPanel != null) {
            jPanel_MongolianTree.removeAll();
        }
        saveNodesIndex = 0;
        String str = saveStrings.get(saveNodesIndex);
        Gson gson = new Gson();
        nodes = gson.fromJson(str, new TypeToken<List<Node>>() {
        }.getType());
        // nodes = Util.BuildTree(str);
        String strMongolia = saveMongolianStrings.get(saveNodesIndex);
        //mongolianNodes = MongolianUtil.BuildTree(strMongolia);
        mongolianNodes = gson.fromJson(strMongolia, new TypeToken<List<MongolianNode>>() {
        }.getType());
        saveNodesIndex++;
        jLabel_StringIndex.setText("第" + saveNodesIndex  + "句");
        panel = new JPanel_ShowTreeItem(nodes);
        // panel.setBounds(0, 0, 900, 1800);
        panel.setPreferredSize(new Dimension(2000, 800));
        scrollPane = new JScrollPane(panel);
        scrollPane.setBounds(0, 0, 1600, 380);
        jPanel_Tree.add(scrollPane);
        mongolianPanel = new JPanel_ShowMongolianTreeItem(mongolianNodes);
        mongolianPanel.setPreferredSize(new Dimension(3000, 800));
        mongolianScrollPane = new JScrollPane(mongolianPanel);
        mongolianScrollPane.setBounds(0, 0, 1600, 380);
        jPanel_MongolianTree.add(mongolianScrollPane);
        jTextAreaSearchString.setText(saveStrings.get(saveNodesIndex));
        jTextArea1ShowMongoliaString.setText(saveMongolianStrings.get(saveNodesIndex));
    }

    private void check() {
        Gson gson = new Gson();
        File rememberLogFile = new File("log.db");
        if (rememberLogFile.exists()) {
            try {
                BufferedReader bf = new BufferedReader(new FileReader("log.db"));
                String logString = bf.readLine();
                bf.close();
                String delogString = EncryptionAndDecryptionUtil.Decryption(logString);
                // JOptionPane.showMessageDialog(this, delogString);
                Remember remember = gson.fromJson(delogString, Remember.class);

                BufferedReader bf2 = new BufferedReader(new FileReader(remember.getSaveLastUseFilePath()));
                String lastUsetimeString = bf2.readLine();
                bf.close();
                String delastUsetimeString = EncryptionAndDecryptionUtil.Decryption(lastUsetimeString);
                RememberLastUseTime rememberLastUseTime = gson.fromJson(delastUsetimeString, RememberLastUseTime.class);

                System.out.println(delastUsetimeString);
                if (remember.getStartTime() > System.currentTimeMillis()) {
                    JOptionPane.showMessageDialog(this, "软件使用时间已经过期请重新更新激活码");
                    register();
                }

                if (remember.getEndTime() == null || remember.getEndTime() < System.currentTimeMillis()) {
                    JOptionPane.showMessageDialog(this, "软件使用时间已经过期请重新更新激活码");
                    register();
                }
                if (remember.getMACAddress() == null || !remember.getMACAddress().equals(MacAddressUtil.getMac())) {
                    JOptionPane.showMessageDialog(this, "软件不在原来激活的机器上使用");
                    register();
                }
                if (remember.getCpuNumber() == null || !remember.getCpuNumber().equals(CpuUtil.getCpu())) {
                    JOptionPane.showMessageDialog(this, "软件不在原来激活的机器上使用");
                    register();
                }

                if (rememberLastUseTime.getLastUseTime() == null || rememberLastUseTime.getLastUseTime() >= remember.getEndTime()) {
                    JOptionPane.showMessageDialog(this, "软件激活码已经过期");
                    register();
                }
                rememberLastUseTime.setLastUseTime(System.currentTimeMillis());
                BufferedWriter bw = new BufferedWriter(new FileWriter(remember.getSaveLastUseFilePath()));
                String strRememberLastUseTime = gson.toJson(rememberLastUseTime);
                String enstrRememberLastUseTime = EncryptionAndDecryptionUtil.Encryption(strRememberLastUseTime);
                bw.write(enstrRememberLastUseTime);
                bw.close();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "程序验证错误");
                register();
            }

        } else {
            register();
        }

    }

    private boolean register() {
        try {
            Gson gson = new Gson();
            String CPUNumber = CpuUtil.getCpu();
            JOptionPane.showMessageDialog(this, "请将该序列号提供给管理员生成激活码：\n" + CPUNumber + "\n该序列号已经复制到您的剪切板直接粘贴即可！");
            SysClipboardUtil.setSysClipboardText(CPUNumber + "");
            String inputText = JOptionPane.showInputDialog(null, "请输入激活码", "");
            if (inputText != null) {
                try {
                    String activationcodestr = EncryptionAndDecryptionUtil.Decryption(inputText);

                    //   JOptionPane.showMessageDialog(this, activationcodestr);
                    Activationcode activationcode = gson.fromJson(activationcodestr, Activationcode.class);
                    Remember remember = new Remember();
                    RememberLastUseTime rememberLastUseTime = new RememberLastUseTime();
                    remember.setStartTime(System.currentTimeMillis());
                    remember.setMACAddress(MacAddressUtil.getMac());

                    remember.setCpuNumber(activationcode.getCpuNumber());
                    if (activationcode.getCpuNumber() == null || activationcode.getEndTime() == null) {
                        JOptionPane.showMessageDialog(this, "nulll");
                        JOptionPane.showMessageDialog(this, "激活码错误");
                        System.exit(0);
                    }
                    if (activationcode.getEndTime() > System.currentTimeMillis()) {
                        remember.setEndTime(activationcode.getEndTime());
                    } else {
                        JOptionPane.showMessageDialog(this, "end");
                        JOptionPane.showMessageDialog(this, "激活码错误");
                        System.exit(0);
                    }
                    if (activationcode.getCpuNumber().equals(CpuUtil.getCpu())) {
                        remember.setEndTime(activationcode.getEndTime());
                    } else {
                        JOptionPane.showMessageDialog(this, "CPU");
                        JOptionPane.showMessageDialog(this, "激活码错误");
                        System.exit(0);
                    }
                    File rememberLogFile = new File("log.db");
                    if (!rememberLogFile.exists()) {
                        rememberLogFile.createNewFile();
                    }
                     String lastUseTimeFilePath = new String("C:" + IDTool.newGUID() + ".db");
//                    ArrayList<File> files = ListCanWriteFolder.getListCanWriteFolder("C:");
//                    String lastUseTimeFilePath;
//                    if (files == null || files.size() == 0) {
//                        lastUseTimeFilePath = new String("C:" + IDTool.newGUID() + ".db");
//                    } else {
//                        Random rand = new Random();
//                        int randNum = rand.nextInt(files.size());
//                        lastUseTimeFilePath = new String(files.get(randNum).getAbsolutePath() + "\\" + IDTool.newGUID() + ".db");
//                    }

                    // String useTimesFilePath = new String(files.get(randNum).getAbsolutePath() + "\\" + IDTool.newGUID() + ".db");
                    // String lastUseTimeFilePath=new  String(files.get(randNum).getAbsolutePath() + "\\" + IDTool.newGUID() + ".db");
                    File lastUseTimeFile = new File(lastUseTimeFilePath);
                    if (!lastUseTimeFile.exists()) {
                        lastUseTimeFile.createNewFile();
                    }

                    remember.setSaveLastUseFilePath(lastUseTimeFilePath);

                    BufferedWriter bw = new BufferedWriter(new FileWriter("log.db"));

                    String strRemember = gson.toJson(remember);

                    String enstrRemember = EncryptionAndDecryptionUtil.Encryption(strRemember);
                    bw.write(enstrRemember);
                    bw.close();

                    rememberLastUseTime.setLastUseTime(System.currentTimeMillis());
                    BufferedWriter bw2 = new BufferedWriter(new FileWriter(lastUseTimeFilePath));
                    String strRememberLastUseTime = gson.toJson(rememberLastUseTime);
                    System.out.println(strRememberLastUseTime);

                    String enstrRememberLastUseTime = EncryptionAndDecryptionUtil.Encryption(strRememberLastUseTime);
                    bw2.write(enstrRememberLastUseTime);
                    bw2.close();

                } catch (Exception ex) {
                    //   JOptionPane.showMessageDialog(this, ex);

                    JOptionPane.showMessageDialog(this, "激活码错误");
                    System.exit(-1);
                }
            } else {
                JOptionPane.showMessageDialog(this, "请输入激活码后再使用，程序即将退出");
                System.exit(-1);
            }
        } catch (IOException iOException) {
            System.out.println(iOException);
            JOptionPane.showMessageDialog(this, "请输入激活码后再使用，程序即将退出");
            System.exit(-1);
        }
        return false;
    }

}
